package com.dzenthai.financial.accounting.service;

import com.dzenthai.financial.accounting.entity.Account;
import com.dzenthai.financial.accounting.entity.Expense;
import com.dzenthai.financial.accounting.entity.Income;
import com.dzenthai.financial.accounting.entity.User;
import com.dzenthai.financial.accounting.entity.enums.Action;
import com.dzenthai.financial.accounting.repository.AccountRepo;
import com.dzenthai.financial.accounting.service.builder.MessageBuilder;
import com.dzenthai.financial.accounting.service.factory.AccountKeyboardFactory;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.interfaces.BotApiObject;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.math.BigDecimal;
import java.util.List;


@Service
public class AccountService {

    private final AccountKeyboardFactory accountKeyboardFactory;
    private final MessageBuilder messageBuilder;
    private final AccountRepo accountRepo;
    private final UserService userService;
    private final ExpenseService expenseService;
    private final IncomeService incomeService;

    public AccountService(
            AccountKeyboardFactory accountKeyboardFactory,
            MessageBuilder messageBuilder,
            AccountRepo accountRepo,
            UserService userService,
            ExpenseService expenseService,
            IncomeService incomeService
    ) {
        this.accountKeyboardFactory = accountKeyboardFactory;
        this.messageBuilder = messageBuilder;
        this.accountRepo = accountRepo;
        this.userService = userService;
        this.expenseService = expenseService;
        this.incomeService = incomeService;
    }

    public BotApiMethod<?> accountMenu(BotApiObject botApiObject) {
        User user = userService.findUserByBotApiObject(botApiObject);
        List<Account> account = getAllAccountsByUser(user);
        if (account.isEmpty()) {
            return messageBuilder.buildMessage("""
                            –ú–µ–Ω—é —Å—á–µ—Ç–æ–≤.
                            
                            –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø—É—Å—Ç.
                            
                            –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, —Å–æ–∑–¥–∞–≤ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!
                            
                            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ —É—á–µ—Ç.
                            """
                    ,
                    botApiObject,
                    accountKeyboardFactory.accountMenuKeyboard(botApiObject));
        }
        return messageBuilder.buildMessage("""
                        –ú–µ–Ω—é —Å—á–µ—Ç–æ–≤.
                        
                        –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.
                        
                        –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤:
                        """,
                botApiObject,
                accountKeyboardFactory.accountMenuKeyboard(botApiObject));
    }

    @Transactional
    public BotApiMethod<?> saveAccount(Message message) {
        Long chatId = message.getChatId();
        String name = message.getText();
        User user = userService.findUserByBotApiObject(message);
        Account account = getAccountByNameAndUser(name, user);
        if (account != null) {
            userService.updateUserAction(chatId, Action.ACCOUNT_ADD);
            return messageBuilder.buildMessage("""
                            –°—á–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "%s" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
                            
                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞.
                            
                            –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
                            """.formatted(name),
                    message,
                    accountKeyboardFactory.backToAccountMenu());
        } else {
            account = Account.builder()
                    .name(name)
                    .user(user)
                    .build();
            accountRepo.save(account);
            userService.updateUserAction(chatId, Action.FREE);
            return messageBuilder.buildMessage("""
                            –°—á–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º - %s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
                            
                            –ù–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—á–µ—Ç—É" –∏–ª–∏ "–ú–µ–Ω—é —Å—á–µ—Ç–æ–≤",
                            —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞—à–µ–º –Ω–æ–≤–æ–º—É —Å—á–µ—Ç—É,
                            –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å—á–µ—Ç–æ–≤.
                            
                            –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                            """.formatted(name),
                    message,
                    accountKeyboardFactory.backToAccountMenuAfterSaveAccountKeyboard(account.getId()));
        }
    }

    @Transactional
    public BotApiMethod<?> deleteAccount(CallbackQuery callbackQuery, String accountId) {
        Long chatId = callbackQuery.getMessage().getChatId();
        User user = userService.findUserByBotApiObject(callbackQuery);
        Account account = getAccountById(Long.valueOf(accountId));
        if (account != null) {
            accountRepo.deleteAccountByIdAndUser(account.getId(), user);
            userService.updateUserAction(chatId, Action.FREE);
            return messageBuilder.buildMessage(
                    "–°—á–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º - %s —É–¥–∞–ª–µ–Ω!".formatted(account.getName()),
                    callbackQuery,
                    accountKeyboardFactory.backToAccountMenu());
        }
        return null;
    }

    public BotApiMethod<?> getAccount(CallbackQuery callbackQuery, String id) {
        User user = userService.findUserByBotApiObject(callbackQuery);
        Account account = getAccountById(Long.valueOf(id));
        BigDecimal totalIncomes = incomeService
                .getAllIncomesByAccountAndDateAfter(account, user.getCompareDate())
                .stream()
                .map(Income::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal totalExpenses = expenseService
                .getAllExpensesByAccountAndDateAfter(account, user.getCompareDate())
                .stream()
                .map(Expense::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal balance = totalIncomes.subtract(totalExpenses);
        if (totalExpenses.compareTo(BigDecimal.ZERO) == 0 && totalIncomes.compareTo(BigDecimal.ZERO) == 0) {
            return messageBuilder.buildMessage("""
                            –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç.
                            
                            –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ç—Ä–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—á–µ—Ç.
                            
                            –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é:
                            """,
                    callbackQuery,
                    accountKeyboardFactory.accountOperationKeyboard(id)
            );
        }
        return messageBuilder.buildMessage("""
                        üïí –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:
                        
                        ‚ú® –î–æ—Ö–æ–¥—ã: %s
                        üí∏ –†–∞—Å—Ö–æ–¥—ã: %s
                        
                        üí∞ –ë–∞–ª–∞–Ω—Å: %s
                        """.formatted(totalIncomes, totalExpenses, balance),
                callbackQuery,
                accountKeyboardFactory.accountOperationKeyboard(id)
        );
    }

    public Account getAccountById(Long id) {
        return accountRepo.findAccountById(id).orElse(null);
    }

    public Account getAccountByNameAndUser(String name, User user) {
        return accountRepo.findAccountByNameAndUser(name, user).orElse(null);
    }

    public List<Account> getAllAccountsByUser(User user) {
        return accountRepo.findAccountsByUser(user).orElse(null);
    }
}
